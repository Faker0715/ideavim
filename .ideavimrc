" ================================================================================================
" = Extensions =====================================
" ================================================================================================
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'

" ================================================================================================
" = Basic settings =====================================
" ================================================================================================
set clipboard+=unnamed
set ignorecase
set scrolloff=30
set history=200
set number
set easymotion
set surround

set smartcase
set ignorecase
set clipboard+=unnamed
set incsearch
set hlsearch
set keep-english-in-normal
set which-key
set notimeout

set nobackup
set noswapfile

noremap <leader>w <Esc>:w<cr>

nnoremap U <C-r>
inoremap jj <Esc>
vnoremap v <Esc>

" ================================================================================================
" = No Leader Keymaps =====================================
" ================================================================================================
" last changed in current buffer(file)

" bookmark in whole program
" nmap ma <action>(ToggleBookmark)
nmap ga '.
nmap ma mA
nmap 'a 'A
nmap ms mS
nmap 's 'S
nmap md mD
nmap 'd 'D
nmap mf mF
nmap 'f 'F
" nmap J <action>(PreviousTab)
" nmap K <action>(NextTab)
nmap ss <Plug>(easymotion-s2)
" inoremap <C-h> <action>(left)
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
nnoremap <C-s> <C-W>s
nnoremap <C-v> <C-W>v
nnoremap U <C-r>
" ================================================================================================
" = Leader Keymaps =====================================
" ================================================================================================
" leaderkey
let mapleader=" "
nnoremap <Leader>/ :action Find<CR>
" ================================================================================================
" üëªüëªüëª Which-Key üëªüëªüëª
" ================================================================================================

" d: diff
" nmap <leader>dd <action>(Vcs.ShowTabbedFileHistory)

" f: Find/Format ‚≠êÔ∏è
let g:WhichKeyDesc_Find = "<leader>f Find"

let g:WhichKeyDesc_Find_FindUsages = "<leader>fu  FindUsages"
nnoremap fu :action FindUsages<CR>

let g:WhichKeyDesc_Find_FindInPath = "<leader>ft FindInPath";
nnoremap <leader>ff :action FindInPath<CR>
" let g:WhichKeyDesc_Find_OpenedProject = "<leader>fp OpenedProject"
" nnoremap <leader>fp :<action>(OpenProjectWindows)

let g:WhichKeyDesc_Find_Format = "<leader>fm Format"
nnoremap <leader>fm :<action>(ReformatCode) \| <action>(OptimizeImports)

let g:WhichKeyDesc_Find_FileStructurePopup = "<leader>fsp FileStructurePopup"
nnoremap fsp :<action>(FileStructurePopup)<CR>

" g: navigation  ‚≠êÔ∏è
let g:WhichKeyDesc_Navigation = "<leader>g Navigation"

let g:WhichKeyDesc_Navigation_GotoAction = "<leader>ga GotoAction"
nnoremap <Leader>ga :action GotoAction<CR>

let g:WhichKeyDesc_Navigation_GotoClass = "<leader>gc GotoClass"
nnoremap <Leader>gc :action GotoClass<CR>

let g:WhichKeyDesc_Navigation_GotoFile = "<leader>gf GotoFile"
nnoremap <Leader>gf :action GotoFile<CR>

let g:WhichKeyDesc_Navigation_GotoSuperMethod = "<leader>gs GotoSuperMethod"
nnoremap gs :action GotoSuperMethod<CR>

let g:WhichKeyDesc_Navigation_JumpToLastChange = "<leader>gl JumpToLastChange"
nnoremap gl :action JumpToLastChange<CR>

let g:WhichKeyDesc_Navigation_GotoImplementation = "<leader>gi GotoImplementation"
nnoremap gi :action GotoImplementation<CR>

let g:WhichKeyDesc_Navigation_GotoDeclaration = "<leader>gd GotoDeclaration"
nnoremap gd :action GotoDeclaration<CR>

let g:WhichKeyDesc_Navigation_GotoTest = "<leader>gt GotoTest"
nnoremap <Leader>gt :action GotoTest<CR>

" let g:WhichKeyDesc_Git_RollbackHunk = "<leader>gr RollbackHunk"
" nmap <leader>gr :action Vcs.RollbackChangedLines<CR>

" i: Insert ‚≠êÔ∏è
let g:WhichKeyDesc_InsertAfterBrackets = "<leader>I InsertAfterBrackets"
nmap <leader>I f(a

" j: add Semicolon and goto nextline‚≠êÔ∏è
let g:WhichKeyDesc_InsertSemicolon = "<leader>j InsertSemicolon"
nmap <leader>j A;<ESC>o

" l: lsp: Language server protocol (align with neovim)‚≠êÔ∏è
let g:WhichKeyDesc_LSP = "<leader>l LSP"
let g:WhichKeyDesc_LSP_Rename = "<leader>lr Rename"
nmap <leader>lr <action>(RenameElement)


" n: No ‚≠êÔ∏è
let g:WhichKeyDesc_No_Highlight = "<leader>nl NoHighlight"
nmap <leader>nl :nohlsearch<CR>


" s: Show ‚≠êÔ∏è
let g:WhichKeyDesc_Show = "<leader>s Show"
let g:WhichKeyDesc_Show_Bookmarks = "<leader>sb ShowBookmarks"
nmap <leader>sb <action>(ShowBookmarks)
let g:WhichKeyDesc_Show_ParameterInfo = "<leader>sb ShowParameterInfo"
nmap <leader>sp <action>(ParameterInfo)

let g:WhichKeyDesc_Show_FilePath = "<leader>sf ShowFilePath"
nnoremap <Leader>sf :action ShowFilePath<CR>

let g:WhichKeyDesc_Show_Usages = "<leader>su ShowUsages"
nnoremap <Leader>su :action ShowUsages<CR>

let g:WhichKeyDesc_Show_Menu = "<leader>spm ShowPopupMenu"
nnoremap <Leader>spm :action ShowPopupMenu<CR>

" r: Run/Re ‚≠êÔ∏è
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"
let g:WhichKeyDesc_RunOrRe_ReRun = "<leader>rr ReRun"
nmap <leader>rr <action>(Rerun)
let g:WhichKeyDesc_RunOrRe_ReRunTests = "<leader>rt ReRunTests"
nmap <leader>rt <action>(RerunTests)
let g:WhichKeyDesc_RunOrRe_RenameElement = "<leader>re RenameElement"
nmap <leader>re <action>(RenameElement);

let g:WhichKeyDesc_RunOrRe_RenameFile= "<leader>re RenameFile"
nnoremap <Leader>rf :action RenameFile<CR>

let g:WhichKeyDesc_RunOrRe_ToggleLineBreakpoint ="<leader>bb ToggleLineBreakpoint"
nmap <leader>bb <action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_RunOrRe_ViewBreakpoints = "<leader>br ViewBreakpoints"
nmap <leader>br <action>(ViewBreakpoints)

let g:WhichKeyDesc_RunOrRe_Run = "<leader>rr Run"
nmap <leader>rr <action>(Run)<CR>
let g:WhichKeyDesc_RunOrRe_Debug = "<leader>rd Debug"
nmap <leader>rd <action>(Debug)<CR>

let g:WhichKeyDesc_ChooseRunConfiguration= "<leader>cD ChooseDebugconfiguration"
nmap <leader>rcc <action>(ChooseDebugconfiguration)

let g:WhichKeyDesc_ChooseDebugConfiguration = "<leader>cD ChooseDebugconfiguration"
nmap <leader>rcd <action>(ChooseDebugconfiguration)

let g:WhichKeyDesc_ChooseDebugConfiguration = "<leader>cD ChooseDebugconfiguration"
nmap <leader>rcD <action>(ChooseDebugconfiguration)


" w: Window ‚≠êÔ∏è
let g:WhichKeyDesc_Windows = "<leader>w Windows"
let g:WhichKeyDesc_Windows_maximize = "<leader>wo maximize"
nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)
let g:WhichKeyDesc_Windows_splitWindowVertically = "<leader>wl splitWindowVertically"
nmap <leader>wl <action>(Macro.SplitVertically)
let g:WhichKeyDesc_Windows_closeActiveWindow = "<leader>wc closeActiveWindow"
nmap <leader>wc <c-w>c

" z: zip(fold) ‚≠êÔ∏è
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zo unZipAll"
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_Zip_ZipAll = "<leader>zc ZipAll"
nmap <leader>zc <action>(CollapseAllRegions)

" c: Close ‚≠êÔ∏è;
let g:WhichKeyDesc_CloseBuffer = "<leader>c CloseBuffer"
nmap <leader>c :q!<CR>

" e: Toggle Explorer ‚≠êÔ∏è
let g:WhichKeyDesc_ToggleExplorerOrExtract = "<leader>e ToggleExplorer"
nmap <leader>e <action>(ActivateProjectToolWindow)
" e: Extract
" extract method/function
vmap <leader>em <action>(ExtractMethod)
" extract constant
vmap <leader>ec <action>(IntroduceConstant)
" extract field
vmap <leader>ef <action>(IntroduceField)
" extract variable
vmap <leader>ev <action>(IntroduceVariable)

nnoremap <Leader>oi :action OptimizeImports<CR>

nnoremap <C-/> :action CommentByLineComment<CR>
inoremap <C-/> :action CommentByLineComment<CR>
vnoremap <C-/> :action CommentByLineComment<CR>
" Â∞ÜÂΩìÂâçË°åÁªôÊ≥®ÈáäÊéâ
" nnoremap <Leader>;; :action CommentByLineComment<CR>

nnoremap [[ :action MethodUp<cr>
nnoremap ]] :action MethodDown<cr>
nnoremap wq :action CloseContent<cr>

" map <F11> :set paste<CR>
" map <F12> :set nopaste<CR>

vnoremap Y "ay
vnoremap P "ap
